---

- name: OpenVPN | Setup | Installing dependencies
  ansible.builtin.package:
    name: ['openssl', 'python3-pexpect']
    state: present

- name: OpenVPN | Setup | Installing
  ansible.builtin.import_tasks: debian/install.yml

- name: OpenVPN | Setup | Creating service user
  ansible.builtin.user:
    name: "{{ OVPN_HC.user }}"
    shell: '/sbin/nologin'

- name: OpenVPN | Setup | Adding capabilities to bind to system-ports (<1024)
  community.general.capabilities:
    path: "{{ ovpn_binary }}"
    capability: 'cap_net_bind_service+eip'
    state: present
  changed_when: false

- name: OpenVPN | Setup | Adding directories \#1
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "{{ OVPN_HC.user }}"
    group: "{{ OVPN_HC.user }}"
    mode: 0755
  loop:
    - "{{ OVPN_CONFIG.path.base }}"
    - "{{ OVPN_HC.path.run }}"

- name: OpenVPN | Setup | Adding directories \#2
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "{{ OVPN_HC.user }}"
    group: "{{ OVPN_HC.user }}"
    mode: 0750
  loop:
    - "{{ OVPN_CONFIG.path.lib }}"
    - "{{ OVPN_CONFIG.path.script }}"
    - "{{ OVPN_CONFIG.path.log }}"

- name: OpenVPN | Setup | Adding directories \#3
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: 'root'
    group: 'root'
    mode: 0755
  loop:
    - "/etc/systemd/system/openvpn@.service.d"

- name: OpenVPN | Setup | Removing directories
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop:
    - "{{ OVPN_CONFIG.path.base }}/client"
    - "{{ OVPN_CONFIG.path.base }}/server"

- name: OpenVPN | Setup | Service override
  ansible.builtin.template:
    src: 'templates/etc/systemd/system/openvpn@.service.d/override.conf.j2'
    dest: '/etc/systemd/system/openvpn@.service.d/override.conf'
    owner: 'root'
    group: 'root'
    mode: 0644
  register: ovpn_override_config

- name:  OpenVPN | Setup | Adding user privileges
  ansible.builtin.template:
    src: 'templates/etc/sudoers.d/openvpn.j2'
    dest: '/etc/sudoers.d/openvpn'
    validate: '/usr/sbin/visudo -cf %s'
    mode: 0640
    owner: 'root'
    group: 'root'

- name: OpenVPN | Setup | Copying scripts
  ansible.builtin.template:
    src: "templates/usr/local/bin/openvpn/{{ item }}.j2"
    dest: "{{ OVPN_CONFIG.path.script }}/{{ item }}"
    owner: 'root'
    group: "{{ OVPN_HC.user }}"
    mode: 0750
  loop:
    - 'auth_util.py'
    - 'auth_pam.py'
    - "{{ OVPN_HC.file.auth.ldap }}"
    - "{{ OVPN_HC.file.auth.system }}"
    - "{{ OVPN_HC.file.auth.totp }}"

- name: OpenVPN | Setup | Copying scripts for unprivileged-mode
  ansible.builtin.template:
    src: "templates/usr/local/bin/openvpn/{{ item }}.j2"
    dest: "{{ OVPN_CONFIG.path.script }}/{{ item }}"
    owner: 'root'
    group: "{{ OVPN_HC.user }}"
    mode: 0750
  loop:
    - 'iproute_wrapper.sh'
  when: OVPN_CONFIG.unprivileged | bool

- name: OpenVPN | Setup | Configuring sysctl to allow traffic forwarding
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_dict: "{{ OVPN_HC.sysctl_forwarding }}"

- name: OpenVPN | Setup | Systemd Daemon-Reload
  ansible.builtin.systemd:
    daemon_reload: true
  when: ovpn_override_config.changed

- name: OpenVPN | Setup | Asking user for restart
  ansible.builtin.pause:
    prompt: "The server-config for instance '{{ server_name }}' has changed!
    Should the service be restarted to apply the changes?
    BE WARNED: Existing connections will be terminated!"
  delegate_to: localhost
  register: ovpn_server_restart
  when:
    - ovpn_updated.changed | default(false) or ovpn_override_config.changed
    - not no_prompts | bool
    - not auto_restart | bool

- name: OpenVPN | Setup | Restarting services
  ansible.builtin.systemd:
    name: "openvpn@{{ server_name }}.service"
    state: restarted
  ignore_errors: true
  when: >
    (ovpn_updated.changed | default(false) or ovpn_override_config.changed) and
    (auto_restart | bool or
    hostvars['localhost'].ovpn_server_restart.user_input | default(false) | bool) and
    server.state != 'absent' and
    server.enabled | bool
  vars:
    server_name: "{{ instance_item.key | sanitize_name }}"
    server: "{{ defaults_instance | combine(instance_item.value, recursive=true) }}"
  loop_control:
    loop_var: instance_item
  with_dict: "{{ OVPN_CONFIG.instances }}"
  register: ovpn_service_restart

- name: OpenVPN | Setup | Pretty error
  ansible.builtin.include_tasks: debian/instance/pretty_error.yml
  when: service_restart.failed | default(false)
  vars:
    ovpn_service_action: "{{ service_restart }}"
  loop_control:
    loop_var: service_restart
  loop: "{{ ovpn_service_restart.results | default([]) }}"
